#! /bin/sh

# lsgithub

# Prev update: Tue Aug  6 10:13:40 JST 2019 by @hohno_at_kuimc
# Prev update: Fri Aug 23 18:45:11 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 24 10:55:52 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 24 10:55:52 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 31 10:57:08 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Jun 19 06:28:16 JST 2021 by @hohno_at_kuimc on hohno-AX3-2020J
# Prev update: Wed Jul  7 22:13:31 JST 2021 by @hohno_at_kuimc
# Prev update: Thu Aug 12 23:47:07 JST 2021 by @hohno_at_kuimc // Deprecating API authentication through query parameters
# Prev update: Sun Aug 15 22:57:29 JST 2021 by @hohno_at_kuimc
# Prev update: Mon Aug 30 21:02:58 JST 2021 by @hohno_at_kuimc
# Prev update: Fri Sep 17 06:02:33 JST 2021 by @hohno_at_kuimc // --clone option added
# Prev update: Mon Nov  1 23:47:46 JST 2021 by @hohno_at_kuimc // --clone option updated 
# Last updated: Sun Jun  5 16:49:31 JST 2022 by @hohno_at_kuimc

# public domain

# ----------------------------------------------------------

# See also:
# https://developer.github.com/v3/repos/#list-user-repositories
# https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api

# ----------------------------------------------------------

# Caveat: Prepare "jq" and "gnu getopt" command and make them ready to be invoked only by the name 

# ----------------------------------------------------------

GITHUBUSER=hohno-46466

SECRET_FILE="$HOME/.secret/github"

#
# Prepare the following lines in $SECRET_FILE
#
# GITHUB_USER="...."
# ACCESS_TOKEN="........"
#
if [ -r "$SECRET_FILE" ] ; then
   eval $(cat "$SECRET_FILE" \
        | expand \
        | sed -n \
            -e 's/^ *\(GITHUB_USER=[^ ]*\)[ ]*$/\1/p'  \
            -e 's/^ *\(ACCESS_TOKEN=[^ ]*\)[ ]*$/\1/p' \
        | sed -e 's/;.*$//g' \
   )
fi

if [ "x$GITHUB_USER"  = "x" ]; then
  echo "*** Warning: Can't find correct secret file. Using default user name ***"
  GITHUB_USER="XXXXXXXX"
fi

if [ "x$ACCESS_TOKEN" = "x" ]; then
  echo "*** Warning: Can't find correct secret file. Using default token ***"
  ACCESS_TOKEN="PPPPPPPPPPPPPPPPPPPPP"
fi

# echo "[$GITHUB_USER]($afo)"
# echo "[$ACCESS_TOKEN]"
# exit

# ----------------------------------------------------------

error_exit () {
    echo "Error: $1"
    exit $2
}

# ----------------------------------------------------------

usage () {
    echo "usage: $(basename $0) [-l] [-c] [-t] [-r] [--public] [--private] [--all|--everybody] [--owner] [--others] [--ssh|--https] [--clone]"
    echo "usage: $(basename $0) [-h|--help]"
    exit $1
}

# ----------------------------------------------------------

# Search for jq command
[ "x$(which jq)" = "x" ] && error_exit "Can't find jq"
jq=$(which jq)

# Search for getopt command
[ "x$(which getopt)" != "x" ] && ggetopt=$(which getopt)
[ "x$(which gnu-getopt)" != "x" ] && ggetopt=$(which gnu-getopt)
[ "x$ggetopt" = "x" ] && error_exit "Can't find getopt nor gnu-getopt"

# ----------------------------------------------------------

REPO_TYPE="all"
CMD1="sort -k5"
CMD2="/usr/bin/cut -c43-"
CMD3="/bin/cat"
SORTOPT=
JQ_OP='=='
STYLE1=0
STYLE2=0

OPTS=`$ggetopt -o lctrh --long help --long public --long private --long all --long everybody --long owner --long others --long ssh --long https --long clone -- "$@"`

if [ "x$?" != "x0" ]; then
    error_exit "gnu-getopt error" 2
    # /* NOT REACHED */
fi

# echo "[$OPTS]"
# exit

eval set -- "$OPTS"

while true
do
    case "$1" in
        --)
            shift
            break;;
        -h|--help)
            usage;
            # /* NOT REACHED */
            break;;
        -l)
            # -l : use a long listing format
            CMD2="/bin/cat"
            CMD3="/bin/cat"
            shift;;
        -c)
            # -c : sort by creation time
            CMD1="sort -k1,1 -k2,2"
            shift;;
        -t)
            # -t : sort by modification time
            CMD1="sort -k3,3 -k4,4"
            shift;;
        -r)
            # -r : reverse order while sorting
            SORTOPT="-r"
            shift;;
        --public)
            # --public : public mode (show public repository only)
            REPO_TYPE="public"
            shift;;
        --private)
            # --private : private mode (show private repository only)
            REPO_TYPE="private"
            shift;;
        --all|--everybody)
            # --all : all mode (show all repositories)
            JQ_OP='!='
            GITHUB_USER=""
            shift;;
        --owner)
            # --owner : owner mode (show owned repositories only)
            JQ_OP='=='
            shift;;
        --others)
            # --others : none owner mode (do not show owned repositories)
            JQ_OP='!='
            shift;;
        --ssh)
            # --ssh : use SSH format
            STYLE1=1
            shift;;
        --https)
            # --https : use HTTPS format
            STYLE1=2
            shift;;
        --clone)
            # --clone : use "git clone" style
            STYLE2=1
            shift;;
        *)
            error_exit "invalid argument: $1" 3
            # /* NOT REACHED */
            ;;
    esac
done

if [ "x$STYLE1" = "x1" -a "x$STYLE2" = "x0" ] ; then
    CMD2="/usr/bin/cut -c43-"
    CMD3="sed -e 's/^/git@github.com:${GITHUBUSER}\//' -e 's/ *$/.git/'"

elif [ "x$STYLE1" = "x2" -a "x$STYLE2" = "x0" ] ; then
    CMD2="/usr/bin/cut -c43-"
    CMD3="sed -e 's/^/https:\/\/github.com\/${GITHUBUSER}\//' -e 's/ *$/.git/'"

elif [ "x$STYLE1" = "x1" -a "x$STYLE2" = "x1" ] ; then
    CMD2="/usr/bin/cut -c43-"
    CMD3="sed -e 's/^/git clone git@github.com:${GITHUBUSER}\//' -e 's/ *$/.git/'"

elif [ "x$STYLE1" = "x2" -a "x$STYLE2" = "x1" ] ; then
    CMD2="/usr/bin/cut -c43-"
    CMD3="sed -e 's/^/git clone https:\/\/git@github.com\/${GITHUBUSER}\//' -e 's/ *$/.git/'"

elif [ "x$STYLE2" = "x1" ] ; then
    CMD2="/usr/bin/cut -c43-"
    CMD3="sed -e 's/^/git clone git@github.com:${GITHUBUSER}\//' -e 's/ *$/.git/'"
fi

# echo "[$CMD3]"
# exit 9

CMD1="$CMD1 $SORTOPT"

# echo curl -s "https://api.github.com/user/repos?access_token=${ACCESS_TOKEN}&type=${REPO_TYPE}&per_page=100" \

curl -H "Authorization: token ${ACCESS_TOKEN}" "https://api.github.com/user/repos?&type=${REPO_TYPE}&per_page=100" 2> /dev/null \
| $jq '.[] | select(.owner.login '${JQ_OP}' "'${GITHUB_USER}'") |.created_at, .updated_at, .name'   \
| awk '{{printf "%s  ",$0};if ((NR % 3) == 0){printf "\n"}}' \
| sed -e 's/"//g'  -e 's/\(-[0-9][0-9]\)T\([0-9][0-9]:\)/\1 \2/g' -e 's/Z  /  /g' \
| eval $CMD1 \
| eval $CMD2 \
| eval $CMD3

# curl -s "https://api.github.com/users/${GITHUB_USER}/repos?per_page=100" \
#     | jq '.[] | .created_at, .updated_at, .name'  \
#     | awk '{{printf "%s  ",$0};if ((NR % 3) == 0){printf "\n"}}'  \
#     | sed -e 's/"//g'  -e 's/\(-[0-9][0-9]\)T\([0-9][0-9]:\)/\1 \2/g' -e 's/Z  /  /g'  \
#     | $CMD

# echo ""
# echo "# open https://github.com/$GITHUB_USER to reach repositories above."
# echo "# You can NOT try this command more than 60 times per an hour."
# echo ""

exit
