#! /bin/sh

# lsgithub

# Prev update: Tue Aug  6 10:13:40 JST 2019 by @hohno_at_kuimc
# Prev update: Fri Aug 23 18:45:11 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 24 10:55:52 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 24 10:55:52 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Aug 31 10:57:08 JST 2019 by @hohno_at_kuimc
# Prev update: Sat Jun 19 06:28:16 JST 2021 by @hohno_at_kuimc on hohno-AX3-2020J
# Prev update: Wed Jul  7 22:13:31 JST 2021 by @hohno_at_kuimc
# Prev update: Thu Aug 12 23:47:07 JST 2021 by @hohno_at_kuimc // Deprecating API authentication through query parameters
# Prev update: Sun Aug 15 22:57:29 JST 2021 by @hohno_at_kuimc
# Last update: Mon Aug 30 21:02:58 JST 2021 by @hohno_at_kuimc

# public domain

# ----------------------------------------------------------

# See also:
# https://developer.github.com/v3/repos/#list-user-repositories
# https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api

# ----------------------------------------------------------

SECRET_FILE="$HOME/.secret/github"
#
# Prepare the following lines in $SECRET_FILE
#
# GITHUB_USER="...."
# ACCESS_TOKEN="........"
#
if [ -r "$SECRET_FILE" ] ; then
   eval $(cat "$SECRET_FILE" \
               | expand \
               | sed -n \
		     -e 's/^ *\(GITHUB_USER=[^ ]*\)[ ]*$/\1/p'  \
		     -e 's/^ *\(ACCESS_TOKEN=[^ ]*\)[ ]*$/\1/p' \
	       | sed -e 's/;.*$//g' \
        )
fi

[ "x$GITHUB_USER"  = "x" ] && GITHUB_USER="XXXXXXXX"
[ "x$ACCESS_TOKEN" = "x" ] && ACCESS_TOKEN="PPPPPPPPPPPPPPPPPPPPP"

# echo "[$GITHUB_USER]($afo)"
# echo "[$ACCESS_TOKEN]"
# exit

# ----------------------------------------------------------

error_exit () {
    echo "$1"
    exit $2
}

# ----------------------------------------------------------

usage () {
    echo "usage: $(basename $0) [-l] [-c] [-t] [-r] [--public] [--private] [--all|--everybody] [--owner] [--others] [--ssh|--https]"
    echo "usage: $(basename $0) [-h|--help]"
    exit $1
}

# ----------------------------------------------------------

# IMPORTANT: set the full path of your gnu getopt and jq command

# # ggetopt=ggetopt
# ggetopt=/usr/local/bin/gnu-getopt
# # ggetopt=/usr/bin/getopt
#
# # jq=jq
# # jq=/usr/local/bin/jq
# jq=/usr/bin/jq

[ "x$(which jq)" = "x" ] && error_exit "Can't find jq"
jq=$(which jq)

[ "x$(which getopt)" != "x" ] && ggetopt=$(which getopt)
[ "x$(which gnu-getopt)" != "x" ] && ggetopt=$(which gnu-getopt)
[ "x$ggetopt)" = "x" ] && error_exit "Can't find getopt nor gnu-getopt"

# ----------------------------------------------------------

REPO_TYPE="all"
CMD1="sort -k5"
CMD2="/usr/bin/cut -c43-"
CMD3="/bin/cat"
SORTOPT=
JQ_OP='=='
STYLE=0

OPTS=`$ggetopt -o lctrh --long help --long public --long private --long all --long everybody --long owner --long others --long ssh --long https -- "$@"`

if [ "x$?" != "x0" ]; then
    error_exit "gnu-getopt error" 2
    exit 999 # /* NOT REACHED */
fi

# echo "[$OPTS]"
# exit

eval set -- "$OPTS"

while true
do
    case "$1" in
        --)
            shift
            break;;
        -h|--help)
            usage;
            exit 999; # /* NOT REACHED */
            break;;
        -l)
            # -l
            CMD2="/bin/cat"
            CMD3="/bin/cat"
            shift;;
        -c)
            # -c
            CMD1="sort -k1,1 -k2,2"
            shift;;
        -t)
            # -t
            CMD1="sort -k3,3 -k4,4"
            shift;;
        -r)
            # -r
            SORTOPT="-r"
            shift;;
        --public)
            # public mode
            REPO_TYPE="public"
            shift;;
        --private)
            # private mode
            REPO_TYPE="private"
            shift;;
        --all|--everybody)
            # all mode
            JQ_OP='!='
            GITHUB_USER=""
            shift;;
        --owner)
            # owner mode
            JQ_OP='=='
            shift;;
        --others)
            # none owner mode
            JQ_OP='!='
            shift;;
        --ssh)
            # SSH style
	    STYLE=1
            CMD2="/usr/bin/cut -c43-"
            CMD3="sed -e 's/^/git@github.com:hohno-46466\//' -e 's/ *$/.git/'"
            shift;;
        --https)
            # HTTPS style
	    STYLE=2
            CMD2="/usr/bin/cut -c43-"
            CMD3="sed -e 's/^/https:\/\/github.com\/hohno-46466\//' -e 's/ *$/.git/'"
            shift;;
        *)
            error_exit "invalid argument: $1" 3
            exit 999 # /* NOT REACHED */
            ;;
    esac
done

# echo "[$CMD3]"

CMD1="$CMD1 $SORTOPT"

# echo curl -s "https://api.github.com/user/repos?access_token=${ACCESS_TOKEN}&type=${REPO_TYPE}&per_page=100" \

curl -H "Authorization: token ${ACCESS_TOKEN}" "https://api.github.com/user/repos?&type=${REPO_TYPE}&per_page=100" \
    | $jq '.[] | select(.owner.login '${JQ_OP}' "'${GITHUB_USER}'") |.created_at, .updated_at, .name'   \
    | awk '{{printf "%s  ",$0};if ((NR % 3) == 0){printf "\n"}}' \
    | sed -e 's/"//g'  -e 's/\(-[0-9][0-9]\)T\([0-9][0-9]:\)/\1 \2/g' -e 's/Z  /  /g' \
    | eval $CMD1 \
    | eval $CMD2 \
    | eval $CMD3

# curl -s "https://api.github.com/users/${GITHUB_USER}/repos?per_page=100" \
    #     | jq '.[] | .created_at, .updated_at, .name'  \
    #     | awk '{{printf "%s  ",$0};if ((NR % 3) == 0){printf "\n"}}'  \
    #     | sed -e 's/"//g'  -e 's/\(-[0-9][0-9]\)T\([0-9][0-9]:\)/\1 \2/g' -e 's/Z  /  /g'  \
    #     | $CMD

# echo ""
# echo "# open https://github.com/$GITHUB_USER to reach repositories above."
# echo "# You can NOT try this command more than 60 times per an hour."
# echo ""

exit
